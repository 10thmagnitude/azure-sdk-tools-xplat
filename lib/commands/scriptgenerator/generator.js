/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; var fs = require("fs");
var path = require("path");

if (!fs.existsSync) {
  fs.existsSync = pathUtil.existsSync;};


var templatesDir = __dirname;
var log = { info: function() {  }};
var confirm = function() { return false;};

exports.generateDeploymentScript = function exports_generateDeploymentScript__1(repositoryRoot, projectType, projectPath, solutionPath, scriptType, logger, confirmFunc, _) { var __frame = { name: "exports_generateDeploymentScript__1", line: 12 }; return __func(_, this, arguments, exports_generateDeploymentScript__1, 7, __frame, function __$exports_generateDeploymentScript__1() {
    argNotNull(repositoryRoot, "repositoryRoot");
    argNotNull(projectType, "projectType");
    argNotNull(scriptType, "scriptType");

    scriptType = scriptType.toUpperCase();
    if (((scriptType != "BATCH") && (scriptType != "BASH"))) {
      return _(new Error("Script type should be either batch or bash")); } ;


    log = (logger || log);
    confirm = (confirmFunc || confirm);

    if (projectPath) {
      if (!isPathSubDir(repositoryRoot, projectPath)) {
        return _(new Error("The project file path should be a sub-directory of the repository root")); } ;


      log.info((("Project file path: ." + path.sep) + path.relative(repositoryRoot, projectPath))); } ;

    if (solutionPath) {
      if (!isPathSubDir(repositoryRoot, solutionPath)) {
        return _(new Error("The solution file path should be a sub-directory of the repository root")); } ;


      log.info((("Solution file path: ." + path.sep) + path.relative(repositoryRoot, solutionPath))); } ;


    projectType = projectType.toUpperCase(); return (function __$exports_generateDeploymentScript__1(__then) {
      if ((projectType === "WAP")) {
        return generateWapDeploymentScript(repositoryRoot, projectPath, solutionPath, scriptType, __cb(_, __frame, 30, 8, __then, true)); } else { return (function __$exports_generateDeploymentScript__1(__then) {

          if ((projectType === "WEBSITE")) {
            return generateWebSiteDeploymentScript(repositoryRoot, solutionPath, scriptType, __cb(_, __frame, 33, 8, __then, true)); } else { return (function __$exports_generateDeploymentScript__1(__then) {

              if ((projectType === "NODE")) {
                return generateNodeDeploymentScript(repositoryRoot, scriptType, __cb(_, __frame, 36, 8, __then, true)); } else { return (function __$exports_generateDeploymentScript__1(__then) {

                  if ((projectType === "BASIC")) {
                    if (solutionPath) {
                      return _(new Error("Solution path is not supported with this website type")); } ;

                    return generateWebSiteDeploymentScript(repositoryRoot, solutionPath, scriptType, __cb(_, __frame, 42, 8, __then, true)); } else {


                    return _(new Error(("Invalid project type received: " + projectType))); } ; })(__then); } ; })(__then); } ; })(__then); } ; })(_); });};



function isPathSubDir(parentPath, childPath) {
  var relativePath = path.relative(parentPath, childPath);




  return ((relativePath.indexOf("..") != 0) && (relativePath != path.resolve(childPath)));};



function generateNodeDeploymentScript(repositoryRoot, scriptType, _) { var __frame = { name: "generateNodeDeploymentScript", line: 71 }; return __func(_, this, arguments, generateNodeDeploymentScript, 2, __frame, function __$generateNodeDeploymentScript() {
    argNotNull(repositoryRoot, "repositoryRoot");

    createIisNodeWebConfigIfNeeded(repositoryRoot);

    return generateBasicDeploymentScript("node.template", scriptType, repositoryRoot, __cb(_, __frame, 5, 4, _, true)); });};


function getNodeStartFile(repositoryRoot) {
  var nodeStartFiles = ["server.js","app.js",];

  for (var i in nodeStartFiles) {
    var nodeStartFilePath = path.join(repositoryRoot, nodeStartFiles[i]);

    if (fs.existsSync(nodeStartFilePath)) {
      return nodeStartFilePath; } ; };



  return null;};


function createIisNodeWebConfigIfNeeded(repositoryRoot) {
  var webConfigPath = path.join(repositoryRoot, "web.config");

  log.info("Generating deployment script for node.js Web Site");

  if (!fs.existsSync(webConfigPath)) {
    log.info("Creating Web.config to enable Node.js activation.");

    var nodeStartFilePath = getNodeStartFile(repositoryRoot);
    if (!nodeStartFilePath) {
      throw new Error("Missing server.js/app.js file which is required for a node.js site"); } ;


    var webConfigContent = getTemplateContent("iisnode.config.template");
    webConfigContent = webConfigContent.replace("{NodeStartFile}", nodeStartFilePath);

    writeContentToFile(webConfigPath, webConfigContent); };};



function generateWapDeploymentScript(repositoryRoot, projectPath, solutionPath, scriptType, _) { var relativeProjectPath, relativeSolutionPath, msbuildArguments; var __frame = { name: "generateWapDeploymentScript", line: 113 }; return __func(_, this, arguments, generateWapDeploymentScript, 4, __frame, function __$generateWapDeploymentScript() {
    argNotNull(repositoryRoot, "repositoryRoot");
    argNotNull(projectPath, "projectPath");

    if ((scriptType != "BATCH")) {
      return _(new Error("Only batch script files are supported for .NET Web Application")); } ;


    log.info("Generating deployment script for .NET Web Application");

    relativeProjectPath = path.relative(repositoryRoot, projectPath);
    relativeSolutionPath = path.relative(repositoryRoot, solutionPath);

    msbuildArguments = (("\"%DEPLOYMENT_SOURCE%\\" + relativeProjectPath) + "\" /nologo /verbosity:m /t:pipelinePreDeployCopyAllFilesToOneFolder /p:_PackageTempDir=\"%DEPLOYMENT_TEMP%\";AutoParameterizationWebConfigConnectionStrings=false;Configuration=Release");
    if ((solutionPath != null)) {
      msbuildArguments += ((" /p:SolutionDir=\"%DEPLOYMENT_SOURCE%\\" + relativeSolutionPath) + "\""); } ;


    return generateDotNetDeploymentScript("deploy.batch.aspnet.wap.template", msbuildArguments, repositoryRoot, __cb(_, __frame, 18, 4, _, true)); });};


function generateWebSiteDeploymentScript(repositoryRoot, solutionPath, scriptType, _) { var relativeSolutionPath, msbuildArguments; var __frame = { name: "generateWebSiteDeploymentScript", line: 134 }; return __func(_, this, arguments, generateWebSiteDeploymentScript, 3, __frame, function __$generateWebSiteDeploymentScript() { return (function __$generateWebSiteDeploymentScript(__then) {
      if (solutionPath) {

        log.info("Generating deployment script for .NET Web Site");

        if ((scriptType != "BATCH")) {
          return _(new Error("Only batch script files are supported for .NET Web Site")); } ;


        relativeSolutionPath = path.relative(repositoryRoot, solutionPath);

        msbuildArguments = (("\"%DEPLOYMENT_SOURCE%\\" + relativeSolutionPath) + "\" /verbosity:m /nologo");
        return generateDotNetDeploymentScript("deploy.batch.aspnet.website.template", msbuildArguments, repositoryRoot, __cb(_, __frame, 12, 8, __then, true)); } else {



        return generateBasicDeploymentScript("basic.template", scriptType, repositoryRoot, __cb(_, __frame, 16, 8, __then, true)); } ; })(_); });};



function generateBasicDeploymentScript(templateFileName, scriptType, repositoryRoot, _) { var lowerCaseScriptType, templateContent; var __frame = { name: "generateBasicDeploymentScript", line: 154 }; return __func(_, this, arguments, generateBasicDeploymentScript, 3, __frame, function __$generateBasicDeploymentScript() {
    argNotNull(templateFileName, "templateFileName");

    log.info("Generating deployment script for Web Site");

    lowerCaseScriptType = scriptType.toLowerCase();

    templateContent = getTemplatesContent([(("deploy." + lowerCaseScriptType) + ".prefix.template"),((("deploy." + lowerCaseScriptType) + ".") + templateFileName),(("deploy." + lowerCaseScriptType) + ".postfix.template"),]);




    return writeDeploymentFiles(templateContent, scriptType, repositoryRoot, __cb(_, __frame, 12, 4, _, true)); });};


function generateDotNetDeploymentScript(templateFileName, msbuildArguments, repositoryRoot, _) { var templateContent; var __frame = { name: "generateDotNetDeploymentScript", line: 169 }; return __func(_, this, arguments, generateDotNetDeploymentScript, 3, __frame, function __$generateDotNetDeploymentScript() {
    argNotNull(templateFileName, "templateFileName");

    templateContent = getTemplatesContent(["deploy.batch.prefix.template","deploy.batch.aspnet.template",templateFileName,"deploy.batch.postfix.template",]);
    templateContent = templateContent.replace("{MSBuildArguments}", msbuildArguments);


    return writeDeploymentFiles(templateContent, "BATCH", repositoryRoot, __cb(_, __frame, 7, 4, _, true)); });};


function getTemplatesContent(fileNames) {
  var content = "";

  for (var i in fileNames) {
    content += getTemplateContent(fileNames[i]); };


  return content;};


function writeDeploymentFiles(templateContent, scriptType, repositoryRoot, _) { var deployScriptFileName, deploymentCommand, deployScriptPath, deploymentFilePath; var __frame = { name: "writeDeploymentFiles", line: 189 }; return __func(_, this, arguments, writeDeploymentFiles, 3, __frame, function __$writeDeploymentFiles() {
    argNotNull(templateContent, "templateContent");



    if ((scriptType == "BATCH")) {
      deployScriptFileName = "deploy.cmd";
      deploymentCommand = deployScriptFileName; }

     else {
      deployScriptFileName = "deploy.sh";
      deploymentCommand = ("sh --login " + deployScriptFileName); } ;


    deployScriptPath = path.join(repositoryRoot, deployScriptFileName);
    deploymentFilePath = path.join(repositoryRoot, ".deployment");


    return writeContentToFile(deployScriptPath, templateContent, __cb(_, __frame, 18, 4, function __$writeDeploymentFiles() {


      return writeContentToFile(deploymentFilePath, ("[config]\ncommand = " + deploymentCommand), __cb(_, __frame, 21, 4, function __$writeDeploymentFiles() {

        log.info((("Generated deployment script (" + deployScriptFileName) + " and .deployment)")); _(); }, true)); }, true)); });};


function getTemplateContent(templateFileName) {
  return fs.readFileSync(getTemplatePath(templateFileName), "utf8");};


function getTemplatePath(fileName) {
  return path.join(templatesDir, fileName);};


function writeContentToFile(path, content, _) { var __frame = { name: "writeContentToFile", line: 223 }; return __func(_, this, arguments, writeContentToFile, 2, __frame, function __$writeContentToFile() { return (function __$writeContentToFile(__then) {

      if (fs.existsSync(path)) {
        return confirm((("The file: \"" + path) + "\" already exists\nAre you sure you want to overwrite it: "), __cb(_, __frame, 3, 13, function ___(__0, __2) { var __1 = !__2; return (function __$writeContentToFile(__then) { if (__1) {
              return _(new Error("File already exist")); } else { __then(); } ; })(__then); }, true)); } else { __then(); } ; })(function __$writeContentToFile() {



      return fs.writeFile(path, content, __cb(_, __frame, 8, 4, _, true)); }); });};


function argNotNull(arg, argName) {
  if (((arg === null) || (arg === undefined))) {
    throw new Error((("The argument '" + argName) + "' is null")); };};
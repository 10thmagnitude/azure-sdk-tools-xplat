/*** Generated by streamline 0.4.5 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; var __ = require("underscore");

















var util = require("util");

var serviceBusManagement = require("../serviceBusManagement");
var ServiceBusManagementService = serviceBusManagement.ServiceBusManagementService;
var namespaceNameIsValid = serviceBusManagement.namespaceNameIsValid;

exports.init = function(cli) {
  var log = cli.output;

  var sb = cli.category("sb").description("Commands to manage your Service Bus configuration");


  var sbnamespace = sb.category("namespace").description("Commands to manage your Service Bus namespaces");


  sbnamespace.command("list").description("List currently defined Service Bus namespaces").option("-s, --subscription <id>", "use the subscription id").execute(function __1(options, _) { var service, progress, namespaces; var __frame = { name: "__1", line: 37 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {



      service = createService(options.subscription);
      progress = cli.progress("Enumerating namespaces");
      return service.listNamespaces(__cb(_, __frame, 3, 23, function ___(__0, __1) { namespaces = __1;
        progress.end();

        formatOutput_(namespaces, function(outputData) {
          if ((outputData.length === 0)) {
            log.info("No namespaces defined"); }
           else {
            log.table(outputData, function(row, ns) {
              row.cell("Name", ns.Name);
              row.cell("Region", ns.Region);
              row.cell("Status", ns.Status); }); } ; }); _(); }, true)); }); });





  sbnamespace.command("show [name]").description("Get detailed information about a single Service Bus namespace").option("-s, --subscription <id>", "use the subscription id").execute(function __2(name, options, _) { var service, progress, namespace; var __frame = { name: "__2", line: 59 }; return __func(_, this, arguments, __2, 2, __frame, function __$__2() {



      return promptIfNotGiven("Service Bus namespace: ", name, __cb(_, __frame, 1, 13, function ___(__0, __1) { name = __1;
        console.log(("Name returned = " + name));
        return namespaceNameIsValid(name, __cb(_, __frame, 3, 6, function __$__2() {
          service = createService(options.subscription);
          progress = cli.progress("Getting namespace");
          return service.getNamespace(name, __cb(_, __frame, 6, 22, function ___(__0, __2) { namespace = __2;
            progress.end();
            formatOutput_(namespace, function(outputData) {
              Object.keys(namespace).forEach(function(key) {
                log.data(util.format("%s: %s", key, namespace[key])); }); }); _(); }, true)); }, true)); }, true)); }); });




  sbnamespace.command("check <name>").description("Check that a Service Bus namespace is legal and available").option("s, --subscription <id>", "use the subscription id").execute(function __3(name, options, _) { var service, progress, result; var __frame = { name: "__3", line: 77 }; return __func(_, this, arguments, __3, 2, __frame, function __$__3() {



      return namespaceNameIsValid(name, __cb(_, __frame, 1, 6, function __$__3() {
        service = createService(options.subscription);
        progress = cli.progress(("checking namespace " + name));
        return service.verifyNamespace(name, __cb(_, __frame, 4, 19, function ___(__0, __1) { result = __1;
          progress.end();

          formatOutput_({ available: result }, function() {
            if (result) {
              log.data((("Namespace " + name) + " is available")); }
             else {
              log.data((("Namespace " + name) + " is not available")); } ; }); _(); }, true)); }, true)); }); });




  sbnamespace.command("create [namespace] [region]").description("Create a new Service Bus namespace").usage("[options] <namespace> <region>").option("-n, --namespace <namespace>", "name of namespace to create").option("-r, --region <region>", "Service Bus region to create namespace in").option("-s, --subscription <id>", "use the subscription id").execute(function __4(namespaceName, region, options, _) { var service, params, progress, createdNamespace; var __frame = { name: "__4", line: 99 }; return __func(_, this, arguments, __4, 3, __frame, function __$__4() {






      service = createService(options.subscription);

      params = normalizeParameters({
        namespace: [namespaceName,options.namespace,],
        region: [region,options.region,] });


      if (params.err) { return _(params.err); } ;

      return promptIfNotGiven("Namespace name: ", params.values.namespace, __cb(_, __frame, 10, 22, function ___(__0, __1) { namespaceName = __1;
        return chooseIfNotGiven("Region: ", "Getting regions", params.values.region, function(cb) {

          service.getRegions(function(err, regions) {
            if (err) { return cb(err); } ;
            cb(null, regions.map(function(r) { return r.Code; })); }); }, __cb(_, __frame, 11, 15, function ___(__0, __2) { region = __2;


          progress = cli.progress(((("creating namespace " + namespaceName) + " in region ") + region));
          return service.createNamespace(namespaceName, region, __cb(_, __frame, 19, 29, function ___(__0, __3) { createdNamespace = __3;
            progress.end();
            formatOutput_(createdNamespace, function() {
              Object.keys(createdNamespace).forEach(function(key) {
                log.data(util.format("%s: %s", key, createdNamespace[key])); }); }); _(); }, true)); }, true)); }, true)); }); });




  sbnamespace.command("delete <name>").description("Delete a Service Bus namespace").option("-s, --subscription <id>", "use the subscription id").execute(function __5(name, options, _) { var service, progress; var __frame = { name: "__5", line: 130 }; return __func(_, this, arguments, __5, 2, __frame, function __$__5() {



      service = createService(options.subscription);
      progress = cli.progress(("deleting namespace " + name));
      return service.deleteNamespace(name, __cb(_, __frame, 3, 6, _, true)); }); });


  var location = sbnamespace.category("location").description("Commands for Service Bus locations");


  location.list = location.command("list").description("Show list of available Service Bus locations").option("-s, --subscription <id>", "use the subscription id").execute(function __6(options, _) { var service, progress, regions; var __frame = { name: "__6", line: 142 }; return __func(_, this, arguments, __6, 1, __frame, function __$__6() {



      service = createService(options.subscription);
      progress = cli.progress("Getting locations");
      return service.getRegions(__cb(_, __frame, 3, 20, function ___(__0, __1) { regions = __1;
        progress.end();
        formatOutput_(regions, function(outputData) {
          log.table(outputData, function(row, region) {
            row.cell("Name", region.FullName);
            row.cell("Code", region.Code); }); }); _(); }, true)); }); });




  function createService(subscription) {
    var account = cli.category("account");
    var subscriptionId = account.lookupSubscriptionId(subscription);
    var pem = account.managementCertificate();
    var auth = {
      keyvalue: pem.key,
      certvalue: pem.cert };


    return new ServiceBusManagementService(subscriptionId, auth); };


  function formatOutput_(outputData, humanOutputGenerator) {
    log.json("silly", outputData);
    if (log.format().json) {
      log.json(outputData); }
     else {
      humanOutputGenerator(outputData); } ; };



  function normalizeParameters(paramDescription) {
    var key, positionalValue, optionValue;
    var paramNames = Object.keys(paramDescription);
    var finalValues = { };

    for (var i = 0; (i < paramNames.length); ++i) {
      key = paramNames[i];
      positionalValue = paramDescription[key][0];
      optionValue = paramDescription[key][1];
      if ((!__.isUndefined(positionalValue) && !__.isUndefined(optionValue))) {
        return { err: new Error((("You must specify " + key) + " either positionally or by name, but not both")) }; }
       else {
        finalValues[key] = (positionalValue || optionValue); } ; };


    return { values: finalValues }; };


  function promptIfNotGiven(promptString, currentValue, callback) {
    if (__.isUndefined(currentValue)) {
      cli.prompt(promptString, function(value) {
        callback(null, value); }); }
     else {
      callback(null, currentValue); } ; };



  function chooseIfNotGiven(promptString, progressString, currentValue, valueProvider, callback) {
    if (__.isUndefined(currentValue)) {
      var progress = cli.progress(progressString);
      valueProvider(function(err, values) {
        progress.end();
        if (err) { return callback(err); } ;
        log.help(promptString);
        cli.choose(values, function(i) {
          callback(null, values[i]); }); }); }


     else {
      callback(null, currentValue); } ; };};